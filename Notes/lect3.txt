 *browserlist - used to  specified browsers like our code must be run for last 2 chrome version 
--syntax--
browserlist : [
    "last 2 chrome versions"
]
 (also skip it)
 
 * pollyfill --[  ( modern js converted into older javascript)
when we write const, let - suppose our browser in very old then it not 
understand what is const let map, so there is a replacement code for 
these functionality which is compatible with older verson of browser ,
 when we write browser list our code converted to older version also 
 ( conversion done by babble)

]

eg -
Arrays.map() pollyfil we can create same map funct which behave excltly same to this map funct

function map {

}

Babble -Compiler (convert js code) [
    it is a package (node package)
    its like just piece of javascript code which is reading our code(modern js code) and 
    converted into another js code (older js code).

    {babel read JSX(modern js code)}
]

* npx = npm run

in script tag ( package-json)
[
    "start" : "parcel index.html",
    "build" : "parcel build index.hyml"
] here- in start - write start command and in build - write build command

 


  React.createElement => object => HTML(dom)
  this is React element in React - ? - object ------

  const heading = React.createElement(
   "h1",   
   {
     id: "headig1",
     key: "h1",
   },
   "Hii...heading1"
 );
 -- to render
 root.render(heading)

 
alternate for React.createElement -
------------------------JSX--------------------------------------

JSX - this is not html in js, this is html like syntax
 (not a package it is a syntax (jsx expression) )
 it use babel for conversion of code - (jsx not run without babel)

 const heading2 = <h1 id="title" key="h1">From jSX</h1> 


// jSX => React.createElement => object => HTML(dom)

 this is  React element in JSX -

const heading2 = (
  <h1 id="title" key="h1">
     From jSX
  </h1>;
);
-- to render - syntax
 root.render(heading2)


*React Components - ? - Functions
Functional - NEW


-- traditional way to write
const HeaderComponent2 =  () => {
  return (
    <div>
      <h1>functional componenet</h1>
      <h2>this is h2 tag</h2>
    </div>
  );
};


--also write in this way - no need to write return in arrow func
**************************************************************
to add simple javaScript code into the 'JSx componenet' use props-- {} and write into it
eg -   {console.log()}

const HeaderComponent1 = () => (
    <div>
      <h1>functional componenet</h1> <h2>this is h2 tag</h2>
    </div>
  );

-- to render - syntax (in jsx and in js)
 root.render(<HeaderComponent />)  or 
 root.render(HeaderComponent())



--- to add a element in function component -> (with props {})
 syntax - {element}

 
--- to add a function in function component -> (with </>)
 syntax - <function/>


***Component composition***  or   *** Composing Components ***
-- passing components as props to other components ---
--to use a function or add a function in jsx componenet(function) called Component composition.
-- syntax - {function()}
eg -


const HeaderComponent1 = () => (
    <div>
    {heading2}                            //element
    <HeaderComponent2/>                  //function component
    {HeaderComponent2()}                 //function component and Component composition
      <h1>functional componenet</h1>
       <h2>this is h2 tag</h2>
    </div>
  );



***************************************************************************************************************************
**********************************---Assignment - 3 --*********************************************************************
***************************************************************************************************************************


Writing Scripts in package.json.

*Q. What converts New Code to Older Code(For older version Browsers)? 
A: Babel 
We do not need to write polyfill. Babel does it automatically.

npx - executing commands without downloading packages
npm - will download required packages

Note: Parcel will not remove console.log automatically. We need to configure for it. There is a package for it, named 'babel-plugin-transform-remove-console' either from babel website or npmjs website: npm install babel-plugin-transform-remove-console --save-dev /-D

Usage: 1.via .babelrc (recommended)
    2. via CLI
    3. via NodeAPI

React-key Reconciliation :
When there are siblings in an array, we need to give keys for each sibling
HW: Read about React-key Reconciliation from React Docs.

React.createElement gives us an Object, which is then converted to html and puts into DOM
JSX uses React.createElement (behind the scenes), which gives Object, and then into HTML, and it is put into DOM
Babel does it. Babel converts JSX. JSX was developed by Facebook.
Babel is must to use JSX.

Q. Is JSX HTML inside JS? No. 
A: JSX is a HTML like Syntax, and not HTML inside JS.

Babel: Compiler for JS.
Read Babel Docs: babeljs.io
Play with Babel in it's website.
Babel comes along with Parcel.

Also Go to it's GitHub Repo, and read about its algorithms.

React Component:
2 Types:
1. Functional Component- NEW
2. Class Based Component - OLD

Functional Comp is just a normal function that returns some piece of JSX, or a react element, or a function. 

Name of a Component starts with a Capital Letter (not mandatory, but good practice to use)

If we have to write multiple lines to be returned in a component, we need to use ()and ; at the end.

 For Homework, use Normal Convention.

Continued... Part 2

Hope it was Helpful ??
Notes Part 2:

Diff b/n React Element & React Component:

React Element is returning an Object.
React Component is a function that returns JSX, or a react element, or a function.

Syntax When rendering:
For React Element, We use root.render(element_name);
For React Component, We use Angular brackets: root.render(<ComponentName />);

 Any piece of Javascript code can be written within {} 

XSS - Cross site scripting (XSS) is an attack in which an attacker injects malicious executable scripts into the code of a trusted application or website. Attackers often initiate an XSS attack by sending a malicious link to a user and enticing the user to click it.

JSX takes care of XSS.

*Interview Q: Component Composition:
A: Writing/ Passing component inside component.
